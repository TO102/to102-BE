name: Deploy to EC2

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Debug Information
        run: |
          echo "HOST value: ${{ secrets.EC2_HOST }}"
          echo "USER value: ${{ secrets.EC2_USER }}"
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}

      - name: Test Network Connection
        run: |
          ping -c 4 ${{ secrets.EC2_HOST }}

      - name: Debug SSH Connection
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key
          chmod 600 private_key
          ssh -v -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -i private_key $USER@$HOST 'echo "SSH connection successful"'

      - name: Deploy to EC2
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key
            chmod 600 private_key
            mkdir -p ~/.ssh
            ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
            rsync -avz -e "ssh -i private_key" --delete dist package*.json ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/to102-BE/
            ssh -o ServerAliveInterval=60 -i private_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
              cd ~/to102-BE
              npm ci --omit=dev
              if [ ! -f ".env" ]; then
                echo "PORT=3000" > .env
              fi
              npx pm2 describe to102-BE > /dev/null || npx pm2 start npm --name "to102-BE" -- run start:prod
              npx pm2 reload to102-BE --update-env
              npx pm2 save
            '

      - name: Verify Deployment
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o ServerAliveInterval=60 -i private_key $USER@$HOST '
            cd ~/to102-BE
            npx pm2 list
            curl -sSf http://localhost:3000 || echo "Application is not responding on port 3000"
          '
